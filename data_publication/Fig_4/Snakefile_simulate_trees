import os

# To run locally:
# snakemake  --snakefile Snakefile_simulate_trees --keep-going --cores 4 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"


localrules: all

sim_folder = os.path.abspath('.')
models = ['BD', 'BDSS', 'BDEI']
REPETITIONS=100

rule all:
    input:
        nwk = expand(os.path.join(sim_folder, 'test_trees', '{model}_huge_100.nwk.gz'), model=models),
        logs = expand(os.path.join(sim_folder, 'predicted_values', '{model}_huge', 'TARGET.csv.gz'), model=models)


rule simulate_bd:
    '''
    Simulates a tree for given BD parameters.
    '''
    input:
        log = os.path.join(sim_folder, '..', 'Fig_3', 'predicted_values', 'BD_large', 'TARGET.csv.gz'),
    output:
        nwk = temp(os.path.join(sim_folder, 'test_trees', 'BD_huge_100.{i}.nwk')),
        log = temp(os.path.join(sim_folder, 'predicted_values', 'BD_huge', 'TARGET.{i}.csv')),
    params:
        mem = 2000,
        name = 'tree_large_{i}',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.1.2"
    shell:
        """
        line=`gzip -dc {input.log} | head -n $(({wildcards.i} + 2)) | tail -n 1 `

        R=`echo $line | cut -d, -f1`
        ip=`echo $line | cut -d, -f2`
        p=`echo $line | cut -d, -f4`
        psi=`bc -l <<< "1/$ip"`
        la=`bc -l <<< "$R/$ip"`

        generate_bd --min_tips 5000 --max_tips 10000 --la $la --psi $psi --p $p \
        --nwk {output.nwk} --log {output.log}
        """

rule simulate_bdei:
    '''
    Simulates a tree for given BDEI parameters.
    '''
    input:
        log = os.path.join(sim_folder, '..', 'Fig_3', 'predicted_values', 'BDEI_large', 'TARGET.csv.gz'),
    output:
        nwk = temp(os.path.join(sim_folder, 'test_trees', 'BDEI_huge_100.{i}.nwk')),
        log = temp(os.path.join(sim_folder, 'predicted_values', 'BDEI_huge', 'TARGET.{i}.csv')),
    params:
        mem = 2000,
        name = 'tree_large_{i}',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.1.2"
    shell:
        """
        line=`gzip -dc {input.log} | head -n $(({wildcards.i} + 2)) | tail -n 1 `

        R=`echo $line | cut -d, -f1`
        ip=`echo $line | cut -d, -f2`
        it=`echo $line | cut -d, -f3`
        p=`echo $line | cut -d, -f5`
        mu=`bc -l <<< "1/$ip"`
        psi=`bc -l <<< "1/$it"`
        la=`bc -l <<< "$R/$it"`

        generate_bdei --min_tips 5000 --max_tips 10000 --mu $mu --la $la --psi $psi --p $p \
        --nwk {output.nwk} --log {output.log}
        """

rule simulate_bdss:
    '''
    Simulates a tree for given BD parameters.
    '''
    input:
        log = os.path.join(sim_folder, '..', 'Fig_3', 'predicted_values', 'BDSS_large', 'TARGET.csv.gz'),
    output:
        nwk = temp(os.path.join(sim_folder, 'test_trees', 'BDSS_huge_100.{i}.nwk')),
        log = temp(os.path.join(sim_folder, 'predicted_values', 'BDSS_huge', 'TARGET.{i}.csv')),
    params:
        mem = 2000,
        name = 'tree_large_{i}',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.1.2"
    shell:
        """
        line=`gzip -dc {input.log} | head -n $(({wildcards.i} + 2)) | tail -n 1 `

        R=`echo $line | cut -d, -f1`
        x=`echo $line | cut -d, -f2`
        f=`echo $line | cut -d, -f3`
        ip=`echo $line | cut -d, -f4`
        p=`echo $line | cut -d, -f6`
        psi=`bc -l <<< "1/$ip"`
        fx=`bc -l <<< $f*$x`
        la=`bc -l <<< "$R/$ip"`
        bss=`bc -l <<< "$la*$fx/($fx+1-$f)"`
        bns=`bc -l <<< "$bss/$x"`
        bnn=`bc -l <<< "$la-$bss"`
        bsn=`bc -l <<< "$bnn*$x"`

        generate_bdss --min_tips 5000 --max_tips 10000 --la_ss $bss --la_sn $bsn --la_ns $bns --la_nn $bnn \
        --psi $psi --p $p \
        --nwk {output.nwk} --log {output.log}
        """

rule combine_nwks:
    '''
    Combines nwk trees.
    '''
    input:
        nwk = expand(os.path.join(sim_folder, 'test_trees', '{{model}}_huge_100.{i}.nwk'), i=range(REPETITIONS)),
    output:
        nwk = os.path.join(sim_folder, 'test_trees', '{model}_huge_100.nwk.gz'),
    params:
        nwk = os.path.join(sim_folder, 'test_trees', '{model}_huge_100.nwk'),
        nwk_pattern = os.path.join(sim_folder, 'test_trees', '{model}_huge_100.$i.nwk'),
        mem = 2000,
        name = 'combine_{model}',
        qos = 'fast'
    threads: 1
    shell:
        """
        rm -rf {output.nwk} {params.nwk}
        for i in {{0..99}}
        do
            cat {params.nwk_pattern} >> {params.nwk}
        done
        gzip {params.nwk}
        """

rule combine_logs:
    '''
    Combines logs.
    '''
    input:
        log = expand(os.path.join(sim_folder, 'predicted_values', '{{model}}_huge', '{{name}}.{i}.csv'), i=range(REPETITIONS))
    output:
        log = os.path.join(sim_folder, 'predicted_values', '{model}_huge', '{name}.csv.gz'),
    params:
        log = os.path.join(sim_folder, 'predicted_values', '{model}_huge', '{name}.csv'),
        log_pattern = os.path.join(sim_folder, 'predicted_values', '{model}_huge', '{name}.$i.csv'),
        mem = 2000,
        name = 'combine_{model}',
        qos = 'fast'
    threads: 1
    shell:
        """
        rm -rf {output.log} {params.log}
        for i in {{0..99}}
        do
            if [ $i -eq 0 ]
            then
                cat {params.log_pattern} > {params.log}
            else
                tail -n 1 {params.log_pattern} >> {params.log}
            fi
        done
        gzip {params.log}
        """